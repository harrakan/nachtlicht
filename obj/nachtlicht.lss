
../obj/nachtlicht.o:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a8 36       	cpi	r26, 0x68	; 104
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	58 d0       	rcall	.+176    	; 0xec <main>
  3c:	cf c0       	rjmp	.+414    	; 0x1dc <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <setColor>:

int buttonstate = 0;


void setColor(struct Color color, int from, int to) 
{
  40:	ef 92       	push	r14
  42:	ff 92       	push	r15
  44:	0f 93       	push	r16
  46:	1f 93       	push	r17
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	03 e6       	ldi	r16, 0x63	; 99
  4e:	10 e0       	ldi	r17, 0x00	; 0
  50:	c2 e6       	ldi	r28, 0x62	; 98
  52:	d0 e0       	ldi	r29, 0x00	; 0
  54:	94 e6       	ldi	r25, 0x64	; 100
  56:	e9 2e       	mov	r14, r25
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	f9 2e       	mov	r15, r25
    
    for (int i = 0; i <= StripLength; i++) {
  5c:	e0 e0       	ldi	r30, 0x00	; 0
  5e:	f0 e0       	ldi	r31, 0x00	; 0
        if ( i >= from &&  i < to )
        {
            led[i].r=color.green;
  60:	d8 01       	movw	r26, r16

void setColor(struct Color color, int from, int to) 
{
    
    for (int i = 0; i <= StripLength; i++) {
        if ( i >= from &&  i < to )
  62:	e4 17       	cp	r30, r20
  64:	f5 07       	cpc	r31, r21
  66:	44 f0       	brlt	.+16     	; 0x78 <setColor+0x38>
  68:	e2 17       	cp	r30, r18
  6a:	f3 07       	cpc	r31, r19
  6c:	2c f4       	brge	.+10     	; 0x78 <setColor+0x38>
        {
            led[i].r=color.green;
  6e:	7c 93       	st	X, r23
            led[i].g=color.red;
  70:	68 83       	st	Y, r22
            //led[i].r=color.red;
            //led[i].g=color.green;
            led[i].b=color.blue;  
  72:	d7 01       	movw	r26, r14
  74:	8c 93       	st	X, r24
  76:	04 c0       	rjmp	.+8      	; 0x80 <setColor+0x40>
        }
        else
        {
            led[i].r=0;
  78:	1c 92       	st	X, r1
            led[i].g=0;
  7a:	18 82       	st	Y, r1
            led[i].b=0;  
  7c:	d7 01       	movw	r26, r14
  7e:	1c 92       	st	X, r1


void setColor(struct Color color, int from, int to) 
{
    
    for (int i = 0; i <= StripLength; i++) {
  80:	31 96       	adiw	r30, 0x01	; 1
  82:	0d 5f       	subi	r16, 0xFD	; 253
  84:	1f 4f       	sbci	r17, 0xFF	; 255
  86:	23 96       	adiw	r28, 0x03	; 3
  88:	b3 e0       	ldi	r27, 0x03	; 3
  8a:	eb 0e       	add	r14, r27
  8c:	f1 1c       	adc	r15, r1
  8e:	e3 30       	cpi	r30, 0x03	; 3
  90:	f1 05       	cpc	r31, r1
  92:	31 f7       	brne	.-52     	; 0x60 <setColor+0x20>
            led[i].r=0;
            led[i].g=0;
            led[i].b=0;  
        }
    }
    ws2812_setleds(led,StripLength);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	70 e0       	ldi	r23, 0x00	; 0
  98:	82 e6       	ldi	r24, 0x62	; 98
  9a:	90 e0       	ldi	r25, 0x00	; 0
}
  9c:	df 91       	pop	r29
  9e:	cf 91       	pop	r28
  a0:	1f 91       	pop	r17
  a2:	0f 91       	pop	r16
  a4:	ff 90       	pop	r15
  a6:	ef 90       	pop	r14
            led[i].r=0;
            led[i].g=0;
            led[i].b=0;  
        }
    }
    ws2812_setleds(led,StripLength);
  a8:	95 c0       	rjmp	.+298    	; 0x1d4 <ws2812_setleds>

000000aa <init_io>:
}

void init_io() 
{
   
    CLKPR=_BV(CLKPCE);
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	86 bd       	out	0x26, r24	; 38
    CLKPR=0;			// set clock prescaler to 1 (attiny 25/45/85/24/44/84/13/13A)
  ae:	16 bc       	out	0x26, r1	; 38
    
    /* define Pin as configured in ws2812_config.h as LEDstrip Pin */
    DDRB|=_BV(ws2812_pin);
  b0:	bc 9a       	sbi	0x17, 4	; 23
    
    /* turn on internal pull-up resistor for the switch */
    BUTTON_PORT |= _BV(BUTTON_BIT);
  b2:	c3 9a       	sbi	0x18, 3	; 24
    

    struct Color black = {0,0,0};
    setColor(black ,0,StripLength);
  b4:	22 e0       	ldi	r18, 0x02	; 2
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	be df       	rcall	.-132    	; 0x40 <setColor>
  c4:	08 95       	ret

000000c6 <button_is_pressed>:
}

int button_is_pressed()
{
        /* the button is pressed when BUTTON_BIT is clear */
        if (bit_is_clear(BUTTON_PIN, BUTTON_BIT))
  c6:	b3 99       	sbic	0x16, 3	; 22
  c8:	0e c0       	rjmp	.+28     	; 0xe6 <button_is_pressed+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f e4       	ldi	r24, 0x4F	; 79
  cc:	93 ec       	ldi	r25, 0xC3	; 195
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <button_is_pressed+0x8>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <button_is_pressed+0xe>
  d4:	00 00       	nop
        {
                _delay_ms(DEBOUNCE_TIME);
                if (bit_is_clear(BUTTON_PIN, BUTTON_BIT)) return 1;
  d6:	86 b3       	in	r24, 0x16	; 22
  d8:	86 95       	lsr	r24
  da:	86 95       	lsr	r24
  dc:	86 95       	lsr	r24
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	89 27       	eor	r24, r25
  e2:	81 70       	andi	r24, 0x01	; 1
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <button_is_pressed+0x22>
        }

        return 0;
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
}
  ea:	08 95       	ret

000000ec <main>:


int main(void)
{
    
    init_io();
  ec:	de df       	rcall	.-68     	; 0xaa <init_io>
    
    while(1)
    {
        if (button_is_pressed())
  ee:	eb df       	rcall	.-42     	; 0xc6 <button_is_pressed>
  f0:	89 2b       	or	r24, r25
  f2:	e9 f3       	breq	.-6      	; 0xee <main+0x2>
        {
            struct Color rgb;
            rgb.red = 255;
            rgb.green = 0;
            rgb.blue = 0;
            setColor(rgb,0,StripLength);
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	6f ef       	ldi	r22, 0xFF	; 255
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	9e df       	rcall	.-196    	; 0x40 <setColor>
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	84 e3       	ldi	r24, 0x34	; 52
 108:	9c e0       	ldi	r25, 0x0C	; 12
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x1e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x28>
 114:	00 00       	nop
            _delay_ms(500);                         // wait for 500ms.
            
            rgb.red = 0;
            rgb.green = 0;
            rgb.blue = 255;
            setColor(rgb,1,2);
 116:	22 e0       	ldi	r18, 0x02	; 2
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	41 e0       	ldi	r20, 0x01	; 1
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	8d df       	rcall	.-230    	; 0x40 <setColor>
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	84 e3       	ldi	r24, 0x34	; 52
 12a:	9c e0       	ldi	r25, 0x0C	; 12
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x40>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x4a>
 136:	00 00       	nop
            _delay_ms(500);
            
            rgb.red = 0;
            rgb.green = 255;
            rgb.blue = 0;
            setColor(rgb,0,1);
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	7f ef       	ldi	r23, 0xFF	; 255
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	7c df       	rcall	.-264    	; 0x40 <setColor>
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	84 e3       	ldi	r24, 0x34	; 52
 14c:	9c e0       	ldi	r25, 0x0C	; 12
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x62>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x6c>
 158:	00 00       	nop
            
            
            rgb.red = 0;
            rgb.green = 0;
            rgb.blue = 0;
            setColor(rgb,0,StripLength);
 15a:	22 e0       	ldi	r18, 0x02	; 2
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	6b df       	rcall	.-298    	; 0x40 <setColor>
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	84 e3       	ldi	r24, 0x34	; 52
 16e:	9c e0       	ldi	r25, 0x0C	; 12
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x84>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x8e>
 17a:	00 00       	nop
 17c:	b8 cf       	rjmp	.-144    	; 0xee <main+0x2>

0000017e <ws2812_sendarray_mask>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  masklo	=~maskhi&ws2812_PORTREG;
 17e:	38 b3       	in	r19, 0x18	; 24
 180:	24 2f       	mov	r18, r20
 182:	20 95       	com	r18
 184:	23 23       	and	r18, r19
  maskhi |=        ws2812_PORTREG;
 186:	38 b3       	in	r19, 0x18	; 24
 188:	34 2b       	or	r19, r20
  sreg_prev=SREG;
 18a:	4f b7       	in	r20, 0x3f	; 63
  cli();  
 18c:	f8 94       	cli
 18e:	fc 01       	movw	r30, r24
 190:	68 0f       	add	r22, r24
 192:	79 1f       	adc	r23, r25

  while (datlen--) {
 194:	e6 17       	cp	r30, r22
 196:	f7 07       	cpc	r31, r23
 198:	61 f0       	breq	.+24     	; 0x1b2 <loop21+0x14>
    curbyte=*data++;
 19a:	81 91       	ld	r24, Z+
    
    asm volatile(
 19c:	98 e0       	ldi	r25, 0x08	; 8

0000019e <loop21>:
 19e:	38 bb       	out	0x18, r19	; 24
 1a0:	87 ff       	sbrs	r24, 7
 1a2:	28 bb       	out	0x18, r18	; 24
 1a4:	88 0f       	add	r24, r24
 1a6:	00 00       	nop
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <loop21+0xc>
 1aa:	28 bb       	out	0x18, r18	; 24
 1ac:	9a 95       	dec	r25
 1ae:	b9 f7       	brne	.-18     	; 0x19e <loop21>
 1b0:	f1 cf       	rjmp	.-30     	; 0x194 <ws2812_sendarray_mask+0x16>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 1b2:	4f bf       	out	0x3f, r20	; 63
 1b4:	08 95       	ret

000001b6 <ws2812_setleds_pin>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_DDRREG |= pinmask; // Enable DDR
 1b6:	27 b3       	in	r18, 0x17	; 23
 1b8:	24 2b       	or	r18, r20
 1ba:	27 bb       	out	0x17, r18	; 23
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
 1bc:	9b 01       	movw	r18, r22
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	26 0f       	add	r18, r22
 1c4:	37 1f       	adc	r19, r23
 1c6:	b9 01       	movw	r22, r18
 1c8:	da df       	rcall	.-76     	; 0x17e <ws2812_sendarray_mask>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	85 e8       	ldi	r24, 0x85	; 133
 1cc:	8a 95       	dec	r24
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <ws2812_setleds_pin+0x16>
 1d0:	00 00       	nop
 1d2:	08 95       	ret

000001d4 <ws2812_setleds>:
#include <avr/io.h>
#include <util/delay.h>
 
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
 1d4:	40 e1       	ldi	r20, 0x10	; 16
 1d6:	ef cf       	rjmp	.-34     	; 0x1b6 <ws2812_setleds_pin>

000001d8 <ws2812_sendarray>:
  _delay_us(50);
}

void ws2812_sendarray(uint8_t *data,uint16_t datlen)
{
  ws2812_sendarray_mask(data,datlen,_BV(ws2812_pin));
 1d8:	40 e1       	ldi	r20, 0x10	; 16
 1da:	d1 cf       	rjmp	.-94     	; 0x17e <ws2812_sendarray_mask>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
